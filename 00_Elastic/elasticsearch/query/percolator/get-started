#----------------------
# percolator in ES2.4
#----------------------

# 1. description
#-----------------
# ES 2.4 - perlocate API
# https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-percolate.html#_percolate_api
# Deprecated in ES 5.0.0
# Should use percolate query now.


# 2. how to use
#-----------------
# Create an index with a mapping for the field message:
PUT /my-index
{
  "mappings": {
    "my-type": {
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  }
}

# Register a query in the percolator:
PUT /my-index/.percolator/1
{
    "query" : {
        "match" : {
            "message" : "bonsai tree"
        }
    }
}

# Match a document to the registered percolator queries:
GET /my-index/my-type/_percolate
{
    "doc" : {
        "message" : "A new bonsai tree in the office"
    }
}


# response
{
  "took": 34,
  "_shards": {
    "total": 5,
    "successful": 5,
    "failed": 0
  },
  "total": 1,
  "matches": [
    {
      "_index": "my-index",
      "_id": "1"
    }
  ]
}


# 3. how to set and pass argument and variables
#    need to use curl / jq
#----------------------------------------------
msg='my message'
echo '{ "query":{ "match" : { "message" : "'$msg'" } } }' | jq . > my_query.json
curl -XPUT 'localhost:9200/my-index/.percolator/query1' -d @my_query.json



#----------------------
# percolator in ES6.0
#----------------------
# percolate query
DELETE  my_index
PUT /my_index
{
  "mappings": {
    "doc": {
      "properties": {
        "message": {
          "type": "text"
        },
        "query": {
          "type": "percolator"
        }
      }
    }
  }
}

PUT /my_index/doc/1?refresh
{
  "query": {
    "match": {
      "message": "bonsai tree"
    }
  }
}

GET my_index/_search

GET /my_index/_search
{
    "query" : {
        "percolate" : {
            "field" : "query",
            "document" : {
                "message" : "A new bonsai tree in the office"
            }
        }
    }
}
