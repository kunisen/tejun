#--------------------------------------------------------------------------------
# watcher sample : use watcher to indexing things in a complicated way
#--------------------------------------------------------------------------------
# put some data
DELETE my_test
DELETE my_test2
PUT my_test/doc/1
{"number": 1}

PUT my_test/doc/2
{"number": 2}

PUT my_test/doc/3
{"number": 3}

# search "aaaa"
GET my_test/_search

# result
{
  "took": 1,
  "timed_out": false,
  "_shards": {
    "total": 5,
    "successful": 5,
    "skipped": 0,
    "failed": 0
  },
  "hits": {
    "total": 3,
    "max_score": 1,
    "hits": [
      {
        "_index": "my_test",
        "_type": "doc",
        "_id": "2",
        "_score": 1,
        "_source": {
          "number": 2
        }
      },
      {
        "_index": "my_test",
        "_type": "doc",
        "_id": "1",
        "_score": 1,
        "_source": {
          "number": 1
        }
      },
      {
        "_index": "my_test",
        "_type": "doc",
        "_id": "3",
        "_score": 1,
        "_source": {
          "number": 3
        }
      }
    ]
  }
}


# prepare for watcher
DELETE _xpack/watcher/watch/my_test_watcher
PUT _xpack/watcher/watch/my_test_watcher
{
  "trigger": {
    "schedule": {
      "interval": "24h"
    }
  },
  "input": {
    "search": {
      "request": {
        "indices": [
          "my_test"
        ],
        "body": {
          "query": {
            "match_all": {}
          }
        }
      }
    }
  },
  "condition": {
    "compare": {
      "ctx.payload.hits.total": {
        "gte": 0
      }
    }
  },
  "actions": {
    "logging_test": {
      "logging": {
        "text": "{{my_test}}"
      }
    },
    "index_test": {
      "transform": {
          "script": """
          for (int i = 0; i < ctx.payload.hits.hits.length; ++i) {
            // copy the source field to new index
            ctx.payload.hits.hits[i] = ctx.payload.hits.hits[i]._source;

            // add triggered_time            
            ctx.payload.hits.hits[i].triggered_time = ctx.trigger.triggered_time;

            // add alert_id with the following format
            //<i of ctx.payload.hits.hits[i] (with zero padding)> - <Unix epoch timestamp of triggered time>
            //----------------------------------------------------------------------------        
            // prepare right justified sequential id
            String rightJustifiedIdStr = i.toString();
            String zeroPadding = '';
            if (i < 10) { zeroPadding = '0000'; }
            else if (10 <= i && i < 99 ) { zeroPadding = '000'; }
            else if (100 <= i && i < 999 ) { zeroPadding = '00'; }
            else if (1000 <= i && i < 9999 ) { zeroPadding = '0'; }
            else { zeroPadding = ''; }
            rightJustifiedIdStr = zeroPadding + rightJustifiedIdStr;
            

            // prepare <unix epoch timestamp of triggered time
            String triggered_time = ctx.trigger.triggered_time.toString();
            OffsetDateTime odt = OffsetDateTime.parse(triggered_time); 
            long epochTriggeredTime = odt.toEpochSecond();
            String epochTriggeredTimeStr = epochTriggeredTime.toString();
            
            // prepare the final alert_id
            ctx.payload.hits.hits[i].alert_id = rightJustifiedIdStr + '-' + epochTriggeredTimeStr;
          }  

          return [ '_doc' : ctx.payload.hits.hits]
          """
        },
      "index": {
        "index": "my_test2",
        "doc_type": "doc"
      }
    }
  }
}

# or run watcher manually if a long interval needs to be specified
POST _xpack/watcher/watch/my_test_watcher/_execute


# response
{
  "_id": "my_test_watcher_6a877279-c395-4906-ad31-a259b7b09a70-2018-02-16T07:59:27.017Z",
  "watch_record": {
    "watch_id": "my_test_watcher",
    "node": "KYPM2tTvTlGE5nLSLNwbUA",
    "state": "executed",
    "status": {
      "state": {
        "active": true,
        "timestamp": "2018-02-16T07:59:24.127Z"
      },
      "last_checked": "2018-02-16T07:59:27.017Z",
      "last_met_condition": "2018-02-16T07:59:27.017Z",
      "actions": {
        "index_test": {
          "ack": {
            "timestamp": "2018-02-16T07:59:27.017Z",
            "state": "ackable"
          },
          "last_execution": {
            "timestamp": "2018-02-16T07:59:27.017Z",
            "successful": true
          },
          "last_successful_execution": {
            "timestamp": "2018-02-16T07:59:27.017Z",
            "successful": true
          }
        },
        "logging_test": {
          "ack": {
            "timestamp": "2018-02-16T07:59:27.017Z",
            "state": "ackable"
          },
          "last_execution": {
            "timestamp": "2018-02-16T07:59:27.017Z",
            "successful": true
          },
          "last_successful_execution": {
            "timestamp": "2018-02-16T07:59:27.017Z",
            "successful": true
          }
        }
      },
      "version": 4513
    },
    "trigger_event": {
      "type": "manual",
      "triggered_time": "2018-02-16T07:59:27.017Z",
      "manual": {
        "schedule": {
          "scheduled_time": "2018-02-16T07:59:27.017Z"
        }
      }
    },
    "input": {
      "search": {
        "request": {
          "search_type": "query_then_fetch",
          "indices": [
            "my_test"
          ],
          "types": [],
          "body": {
            "query": {
              "match_all": {}
            }
          }
        }
      }
    },
    "condition": {
      "compare": {
        "ctx.payload.hits.total": {
          "gte": 0
        }
      }
    },
    "result": {
      "execution_time": "2018-02-16T07:59:27.017Z",
      "execution_duration": 47,
      "input": {
        "type": "search",
        "status": "success",
        "payload": {
          "_shards": {
            "total": 5,
            "failed": 0,
            "successful": 5,
            "skipped": 0
          },
          "hits": {
            "hits": [
              {
                "number": 2,
                "triggered_time": "2018-02-16T07:59:27.017Z",
                "alert_id": "00000-1518767967"
              },
              {
                "number": 1,
                "triggered_time": "2018-02-16T07:59:27.017Z",
                "alert_id": "00001-1518767967"
              },
              {
                "number": 3,
                "triggered_time": "2018-02-16T07:59:27.017Z",
                "alert_id": "00002-1518767967"
              }
            ],
            "total": 3,
            "max_score": 1
          },
          "took": 0,
          "timed_out": false
        },
        "search": {
          "request": {
            "search_type": "query_then_fetch",
            "indices": [
              "my_test"
            ],
            "types": [],
            "body": {
              "query": {
                "match_all": {}
              }
            }
          }
        }
      },
      "condition": {
        "type": "compare",
        "status": "success",
        "met": true,
        "compare": {
          "resolved_values": {
            "ctx.payload.hits.total": 3
          }
        }
      },
      "actions": [
        {
          "id": "index_test",
          "type": "index",
          "status": "success",
          "transform": {
            "type": "script",
            "status": "success",
            "payload": {
              "_doc": [
                {
                  "number": 2,
                  "triggered_time": "2018-02-16T07:59:27.017Z",
                  "alert_id": "00000-1518767967"
                },
                {
                  "number": 1,
                  "triggered_time": "2018-02-16T07:59:27.017Z",
                  "alert_id": "00001-1518767967"
                },
                {
                  "number": 3,
                  "triggered_time": "2018-02-16T07:59:27.017Z",
                  "alert_id": "00002-1518767967"
                }
              ]
            }
          },
          "index": {
            "response": [
              {
                "created": true,
                "result": "created",
                "id": "NbSgnWEBpTk9lg4lC3JO",
                "version": 1,
                "type": "doc",
                "index": "my_test2"
              },
              {
                "created": true,
                "result": "created",
                "id": "NrSgnWEBpTk9lg4lC3JO",
                "version": 1,
                "type": "doc",
                "index": "my_test2"
              },
              {
                "created": true,
                "result": "created",
                "id": "N7SgnWEBpTk9lg4lC3JO",
                "version": 1,
                "type": "doc",
                "index": "my_test2"
              }
            ]
          }
        },
        {
          "id": "logging_test",
          "type": "logging",
          "status": "success",
          "logging": {
            "logged_text": ""
          }
        }
      ]
    },
    "messages": []
  }
}

# check the new index
GET my_test2/_search

# result
{
  "took": 0,
  "timed_out": false,
  "_shards": {
    "total": 5,
    "successful": 5,
    "skipped": 0,
    "failed": 0
  },
  "hits": {
    "total": 3,
    "max_score": 1,
    "hits": [
      {
        "_index": "my_test2",
        "_type": "doc",
        "_id": "NrSgnWEBpTk9lg4lC3JO",
        "_score": 1,
        "_source": {
          "number": 1,
          "triggered_time": "2018-02-16T07:59:27.017Z",
          "alert_id": "00001-1518767967"
        }
      },
      {
        "_index": "my_test2",
        "_type": "doc",
        "_id": "NbSgnWEBpTk9lg4lC3JO",
        "_score": 1,
        "_source": {
          "number": 2,
          "triggered_time": "2018-02-16T07:59:27.017Z",
          "alert_id": "00000-1518767967"
        }
      },
      {
        "_index": "my_test2",
        "_type": "doc",
        "_id": "N7SgnWEBpTk9lg4lC3JO",
        "_score": 1,
        "_source": {
          "number": 3,
          "triggered_time": "2018-02-16T07:59:27.017Z",
          "alert_id": "00002-1518767967"
        }
      }
    ]
  }
}
